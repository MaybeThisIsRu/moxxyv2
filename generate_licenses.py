import yaml
import requests

def render_library(obj, _license):
    return '\tLibrary(name: "{}", license: "{}", url: "{}")'.format(
        obj["name"],
        _license,
        obj["url"]
    )

def homepage_wrapper(obj):
    if "homepage" in obj["latest"]["pubspec"]:
        return obj["latest"]["pubspec"]["homepage"]
    elif "repository" in obj["latest"]["pubspec"]:
        return obj["latest"]["pubspec"]["repository"]

    raise Exception("No homepage or repository for " + obj["name"])

def get_library_data(pkg):
    req = requests.get("https://pub.dev/api/packages/" + pkg)
    
    return {
        "name": req.json()["name"],
        "url": homepage_wrapper(req.json())
    }

def get_license(pkg):
    req = requests.get("https://pub.dev/packages/" + pkg + "/license")

    if "Apache-2.0" in req.text:
        return "Apache-2.0"
    elif "BSD-3-Clause" in req.text:
        return "BSD-3-Clause"
    elif "MIT" in req.text:
        return "MIT"

    raise Exception("Unknown license for " + pkg)

def mklib(pkg):
    print(pkg)
    return render_library(get_library_data(pkg), get_license(pkg))
    
#print(get_license("flutter_settings_ui"))
#print(get_library_data("flutter_settings_ui"))

def main():
    with open("pubspec.yaml", "r") as f:
        pubspec = yaml.load(f.read(), Loader=yaml.Loader)

    libs = [ mklib(pkg) for pkg in pubspec["dependencies"] if pkg not in ("flutter",) ]
    devlibs = [ mklib(pkg) for pkg in pubspec["dev_dependencies"] if pkg not in ("flutter_test", "test",) ]

    extra = pubspec.get("extra_licenses", {})
    extralibs = [ render_library({ "name": obj, "url": extra[obj]["url"] }, extra[obj]["license"]) for obj in extra ]

    generated = '''
// Generated by generate_providers.py
import "dart:collection";
import "package:moxxyv2/data/libraries.dart";

final List<Library> usedLibraryList = [
{}
];
'''.format(",\n".join(libs + devlibs + extralibs));

    with open("lib/data/generated/licenses.dart", "w") as f:
        f.write(generated)
    #print(generated)

if __name__ == "__main__":
    main()
